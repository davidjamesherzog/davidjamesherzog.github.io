<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://localhost:4000/</title>
   
   <link>http://localhost:4000/</link>
   <description>A front-end developer who loves to learn and tinker with new technologies.</description>
   <language>en-us</language>
   
      
            
               
               
                  <managingEditor>David Herzog</managingEditor>
            
      
   
   <title>
   <![CDATA[ David Herzog - evadgozreh ]]>
   </title>
   <description>
   <![CDATA[ A front-end developer who loves to learn and tinker with new technologies. ]]>
   </description>
   <link>http://localhost:4000/</link>
   <image>
   <url>http://localhost:4000/assets/images/favicon.png</url>
   <title>David Herzog - evadgozreh</title>
   <link>http://localhost:4000/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="http://localhost:4000/author/dave/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Angular and Bulma</title>
	  <link>http://localhost:4000/angular-bulma</link>
		
				
						<author>David Herzog</author>
				
		
	  <pubDate>2018-01-30T05:00:00-05:00</pubDate>
	  <guid>http://localhost:4000/angular-bulma</guid>
	  <description><![CDATA[
	     <p></p>
<p>I recently wanted to include the Bulma CSS library into my Angular project.  I didn't just want to include the library in my project, I wanted to be able to include just pieces of the library and maybe override a thing or two.  This post will explain how to include Bulma into your Angular projects using SASS.</p>


<h3 id="basictagging">Getting Started</h3>
<p>You'll need to install <code>angular-cli</code> first so that you can create an Angular project.</p>

<pre><code class="nohighlight">$ npm install -g angular-cli
</code></pre>
  

<p>Creating a new anuglar project is easy with <code>angular-cli</code>.  Let'g go ahead and use the <code>ng new</code> command to create a new angular project.  We will specify that we want to use <code>SASS</code> for our CSS.</p>

<pre><code class="nohighlight">$ ng new angular-bulma --style=scss
</code></pre>

<p>I really don't like keeping my sass files at the root of my <code>src</code> directory.  So we'll create a <code>sass</code> directory to hold our sass files and then move our <code>styles.scss</code> into it.</p>

<pre><code class="nohighlight">$ cd src
$ mkdir sass
$ mv styles.scss sass
</code></pre>

<p>Now that we have moved the location of our main sass file, we'll have to update our <code>angular-cli.json</code> configuration file to reflect that change.  Search for <code>styles</code> and replace it with the following:</p>

<pre><code class="nohighlight">"styles": [
  "sass/styles.scss"
],
</code></pre>

<p>Now the fun begins.  Lets go ahead and install Bulma</p>

<pre><code class="nohighlight">$ npm install bulma --save
</code></pre>

<p>You will be able to find Bulma sass files under <code>/node_modules/bulma/sass</code>.  We'll first import the <code>initial-variables</code> sass file.  After that we will import the main Bulma sass file.</p>

<pre><code class="nohighlight">@import "~bulma/sass/utilities/initial-variables";

@import "~bulma/bulma";
</code></pre>

<p>We'll add a button to our page.  Find the <code>app.component.html</code> file and add a button.</p>

<pre><code class="nohighlight">&lt;a class="button is-link"&gt;Success&lt;/a&gt;
</code></pre>

<p>Let's test it out.  Start your app.</p>

<pre><code class="nohighlight">$ npm start
</code></pre>

<p>Go to your page by going <a href="http://localhost:4200/">here</a>.  You should see Bulma working now with a nice stylized button.</p>

<p>Lastly, we are going to override one of Bulma's color variables.  Let's go ahead and add to our <code>styles.scss</code> file.  Before the Bulma import, lets add a color override and set the primary color to red.</p>

<pre><code class="nohighlight">// Customization
$blue:  hsl(217, 10%, 53%);
$primary: $red;
</code></pre>

<p>Refresh the page and now you should see more of a grey color for the button than the default blue color.</p>
	  ]]></description>
	</item>

	<item>
	  <title>Node, Docker and nginx</title>
	  <link>http://localhost:4000/node-docker-nginx</link>
		
				
						<author>David Herzog</author>
				
		
	  <pubDate>2018-01-01T05:18:00-05:00</pubDate>
	  <guid>http://localhost:4000/node-docker-nginx</guid>
	  <description><![CDATA[
	     <p></p>
<p>There may be times in your development process where you might want to run your code locally just like you would run it in production.  Most of us run different operating systems for development than where we run our production code.  Docker makes it easy for you to spin up an enviroment that mimics your production enviroment locally.</p>


<h3 id="basictagging">Getting Started</h3>
<p>We'll start off by creating a new project.  This is easy to do by using the <code>npm init</code> command.</p>

<pre><code class="nohighlight">$ npm init -f
</code></pre>

<p>Lets go ahead and create a source directory and create a simple index.html file.</p>

<pre><code class="nohighlight">$ mkdir src
$ cd src
$ touch index.html
</code></pre>

<p>Once you have created the index.html file, add the following html code for a very simple example.</p>

<pre><code class="nohighlight">&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Node-Docker-nginx&lt;/title&gt;
  &lt;/head&gt;
  
  &lt;body&gt;
    &lt;p&gt;Hello Node Docker nginx example&lt;/p&gt;
  &lt;body&gt;
&lt;/html&gt;
</code></pre>

<p>Now you will create your Dockerfile.</p>

<pre><code class="nohighlight">$ touch Dockerfile
</code></pre>

<p>We'll leverage the existing nginx docker container from <a href="https://hub.docker.com/_/nginx/">here</a>.</p>

<pre><code class="nohighlight"># Builds a Docker to deliver src/
FROM nginx:latest
COPY src/ /usr/share/nginx/html
</code></pre>

<p>We'll use your Dockerfile to create the nginx docker image.</p>

<pre><code class="nohighlight">docker build -t node-docker-nginx:latest .
</code></pre>

<p>Now the docker image should be created.  To verify, run the following docker command:</p>

<pre><code class="nohighlight">docker images 
</code></pre>

<p>You should see your newly created docker image like this.</p>

<pre><code class="nohighlight">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
node-docker-nginx        latest              4a3eea93df52        5 seconds ago       181.5 MB
</code></pre>

<p>Next, you'll create the docker container by running the following docker command.  This will run nginx on port <code>8080</code> instead of the default port of <code>80</code>.</p>

<pre><code class="nohighlight">docker run --name node-docker-nginx -d -p 8080:80 node-docker-nginx
</code></pre>

<p>List the containers that you have created.</p>

<pre><code class="nohighlight">docker ps -a
</code></pre>

<p>You should see your new docker container like this.</p>

<pre><code class="nohighlight">CONTAINER ID    IMAGE                COMMAND                  ...   PORTS                           NAMES
38be8f13dcd9    node-docker-nginx    "nginx -g 'daemon off"   ...   443/tcp, 0.0.0.0:8080->80/tcp   node-docker-nginx
</code></pre>

<p>Now all you have to do is start your container.</p>

<pre><code class="nohighlight">docker start node-docker-nginx
</code></pre>

<p>Go to your <code>index.html</code> page by going <a href="http://localhost:8080/">here</a>.</p>

	  ]]></description>
	</item>


</channel>
</rss>
